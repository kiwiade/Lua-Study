-----------------------------------------------------------------------------
--
-- 4 문장
--
-----------------------------------------------------------------------------
--
-- 4.1 할당문
--
-- 루아는 다중 할당을 지원한다.
a, b = 10, 20
b, a = a, b
print(a, b)
-- 
-- 변수보다 값의 개수가 적을 경우 남는 변수에는 nil을 대입한다.
-- 값의 개수가 더 많을 경우 남는 값은 그냥 버린다.
x, y, z = 0, 1			--> 0 1 nil
print(x, y, z)
x, y = x+1, x+1, x+2	--> 1 1
print(x, y)
x, y, z = 0				--> 0 nil nil
print(x, y, z)
--
-----------------------------------------------------------------------------
--
-- 4.2 지역 변수와 구역
--
-- local을 사용하면 지역 변수를 만들 수 있다.
j = 10			-- 전역 변수
local i = 1		-- 지역 변수
-- 
-- 지역 변수는 유효 범위가 끝나자마자 사라지므로 가비지 컬렉터가 재사용할 수 있게 해줌
-- 
-----------------------------------------------------------------------------
--
-- 4.3 제어 구조
--
--
-- * 4.3.1 if then else문
-- 루아에는 switch문이 없기 때문에 elseif를 연달아 쓰는 형태가 비교적 흔하게 쓰이는 편 
op = "+"
if op == "+" then
	r = a+b
elseif op == "-" then
	r = a-b
elseif op == "*" then
	r = a*b
elseif op == "/" then
	r = a/b
else
	error("invalid operation")
end
print("r:"..r)
--
--
-- * 4.3.2 while문
k = {"test", "test2", "test3"}
local i = 1
while k[i] do
	print(k[i])
	i = i+1
end
--
--
-- * 4.3.3 repeat문
-- repeat-until문은 조건이 참일 때까지 몸체를 반복해서 실행
-- 몸체가 한번은 실행되므로 c의 do-while문과 비슷하다
i =1
repeat
	print("hello")
	i = i+1
until i==3
--
--
-- * 4.3.4 수치 for문
for i = 10, 1, -1
do
	print(i)
end
-- 위처럼 10에서 시작하여 1까지 -1씩 증가시키면서 반복한다.
-- 3번째 수식(증가치)을 생략하면 반복시 1씩 증가한다.
-- 상한 없이 반복하고 싶은 경우에는 math.huge 상수를 쓰면 된다.
--
--
-- * 4.3.5 일반 for문
t = {a = "aa", b = "bb", c = 313}
for k, v in pairs(t)
do
	print(k,v)
end
-- 테이블을 순히하는 데 편리한 pairs 반복자 함수를 사용한다.
-- 반복마다 k에는 키가 v에는 키에 해당하는 값이 들어간다.
-- 줄마다 반복할때 쓰는 io.lines, 키-값 쌍을 반복하는 pairs, 순열의 요소마다 반복하는 ipars 등이 있다.
--
-----------------------------------------------------------------------------
--
-- 4.4 break, return, goto
--
-- break문은 자신이 포함된 반복문을 종료
-- return문은 함수를 그냥 끝내거나 끝내고 함수의 결과를 반환
-- goto문은 지정한 레이블로 프로그램의 실행을 옮긴다
--
-- goto문이 이동할 때에는 1.구역 안으로 들어갈 수 없으며
-- 2. 함수 밖으로 이동할 수 없고,
-- 3. 지역 변수 범위로 이동해 들어갈 수 없다.
-- 
-- goto문을 바람직하게 쓰는 예는 루아에는 없는 continue나 다단계 break 등을 흉내내기 위해 쓴다.
--
-- while <조건> do
-- 	::redo::
-- 	if <다른 조건> then goto continue
-- 	elseif <또 다른 조건> then goto redo
-- 	end
--	local var = something
-- 	<코드>
-- ::continue::
-- end
--
-- 위와 같이 사용할 경우 continue로 goto되면 var 변수의 범위로 들어가지 않는다.
--
-----------------------------------------------------------------------------

-- 연습문제 4.2
-- 루아로 무한 반복문을 4가지 방법으로 구현해 보자. 어떤 방법이 나은가?
for i=1, math.huge do
	print("a")
end


i = 1
while i<math.huge do
	print("b")
end


i = 1
repeat
	print("c")
until i>math.huge


::re:: do
	print("d")
	goto re
end
-- 아무래도 익숙한 for문이 가장 편하다...